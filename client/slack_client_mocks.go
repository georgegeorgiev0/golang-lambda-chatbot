// Code generated by MockGen. DO NOT EDIT.
// Source: ./client/slack_client.go

// Package client is a generated GoMock package.
package client

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHttpClient is a mock of HttpClient interface.
type MockHttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientMockRecorder
}

// MockHttpClientMockRecorder is the mock recorder for MockHttpClient.
type MockHttpClientMockRecorder struct {
	mock *MockHttpClient
}

// NewMockHttpClient creates a new mock instance.
func NewMockHttpClient(ctrl *gomock.Controller) *MockHttpClient {
	mock := &MockHttpClient{ctrl: ctrl}
	mock.recorder = &MockHttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpClient) EXPECT() *MockHttpClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpClientMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpClient)(nil).Do), req)
}

// MockSlackClientInt is a mock of SlackClientInt interface.
type MockSlackClientInt struct {
	ctrl     *gomock.Controller
	recorder *MockSlackClientIntMockRecorder
}

// MockSlackClientIntMockRecorder is the mock recorder for MockSlackClientInt.
type MockSlackClientIntMockRecorder struct {
	mock *MockSlackClientInt
}

// NewMockSlackClientInt creates a new mock instance.
func NewMockSlackClientInt(ctrl *gomock.Controller) *MockSlackClientInt {
	mock := &MockSlackClientInt{ctrl: ctrl}
	mock.recorder = &MockSlackClientIntMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackClientInt) EXPECT() *MockSlackClientIntMockRecorder {
	return m.recorder
}

// CreateRequest mocks base method.
func (m *MockSlackClientInt) CreateRequest(url, bearer string, data []byte) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequest", url, bearer, data)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequest indicates an expected call of CreateRequest.
func (mr *MockSlackClientIntMockRecorder) CreateRequest(url, bearer, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequest", reflect.TypeOf((*MockSlackClientInt)(nil).CreateRequest), url, bearer, data)
}

// PostMessage mocks base method.
func (m *MockSlackClientInt) PostMessage(url, bearer string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMessage", url, bearer, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostMessage indicates an expected call of PostMessage.
func (mr *MockSlackClientIntMockRecorder) PostMessage(url, bearer, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockSlackClientInt)(nil).PostMessage), url, bearer, data)
}

// PreparePostMessagePayload mocks base method.
func (m *MockSlackClientInt) PreparePostMessagePayload(message, channel string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreparePostMessagePayload", message, channel)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreparePostMessagePayload indicates an expected call of PreparePostMessagePayload.
func (mr *MockSlackClientIntMockRecorder) PreparePostMessagePayload(message, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreparePostMessagePayload", reflect.TypeOf((*MockSlackClientInt)(nil).PreparePostMessagePayload), message, channel)
}
